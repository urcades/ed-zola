---
import { getCollection } from "astro:content";
import Base from '../layouts/Base.astro';
const allPosts = await getCollection("writing");

interface BlogPost {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: {
    title: string;
    pubDate: Date;
    description: string;
  };
  render: () => Promise<{
    remarkPluginFrontmatter: Record<string, unknown>;
  }>;
}

function groupPostsByYear(posts: BlogPost[]): Record<string, BlogPost[]> {
  const postsByYear: Record<string, BlogPost[]> = {};

  posts.forEach((post) => {
    const year = post.data.pubDate.getFullYear().toString(); // Convert Date to string

    if (!postsByYear[year]) {
      postsByYear[year] = [];
    }

    postsByYear[year].push(post);
    postsByYear[year].sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
  });

  return postsByYear;
}

const groupedPosts = groupPostsByYear(allPosts);
const sortedYears = Object.keys(groupedPosts).sort((a, b) => Number(b) - Number(a)); // Sort years in descending order
---

<Base>
  {sortedYears.map((year) => (
    <>
      <p class="italic pt-4">{year}</p>
      <ul class="pt-4">
        {groupedPosts[year].map((post) => (
          <li>
            <a href={`/writing/${post.slug}/`} title={post.data.pubDate.toISOString()}>
              {post.data.title}
            </a>
          </li>
        ))}
      </ul>
    </>
  ))}
</Base>