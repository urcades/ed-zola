---
import Base from "../layouts/Base.astro";
import { getCollection } from "astro:content";
const allPosts = await getCollection("writing");

const pageTitle = "Ã‰. Urcades: Ongoing Writing";

interface BlogPost {
  id: string;
  body: string;
  collection: string;
  data: {
    title: string;
    pubDate: Date;
    description: string;
  };
  render: () => Promise<{
    remarkPluginFrontmatter: Record<string, unknown>;
  }>;
}

function groupPostsByYear(posts: BlogPost[]): Record<string, BlogPost[]> {
  return posts.reduce(
    (acc, post) => {
      const year = post.data.pubDate.getFullYear().toString();
      acc[year] = acc[year] || [];
      acc[year].push(post);
      acc[year].sort(
        (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()
      );
      return acc;
    },
    {} as Record<string, BlogPost[]>
  );
}

const groupedPosts = groupPostsByYear(allPosts);
const sortedYears = Object.keys(groupedPosts).sort(
  (a, b) => Number(b) - Number(a)
);
---

<style>
  li {
    list-style: circle;
  }
</style>

<Base pageTitle={pageTitle}>
  {
    sortedYears.map((year) => (
      <>
        <em>{year}</em>
        <ul>
          {groupedPosts[year]?.map((post) => (
            <li>
              <a
                href={`/writing/${post.id}/`}
                title={post.data.pubDate.toISOString()}
              >
                {post.data.title}
              </a>
            </li>
          ))}
        </ul>
      </>
    ))
  }
  <br />
  <p><a href="https://urcades.substack.com/">Subscribe</a></p>
  <p><a href="/rss.xml">RSS</a></p>
</Base>
